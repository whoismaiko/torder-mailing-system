from dotenv import load_dotenv
load_dotenv()
import os
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
from functools import wraps

# Outlook Configuration
SMTP_SERVER = "smtp.office365.com"
SMTP_PORT = 587
EMAIL_ADDRESS = os.getenv("OUTLOOK_MAIL")
EMAIL_PASSWORD = os.getenv("OUTLOOK_PASSWORD")
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

# Get group ID from environment
ALLOWED_GROUP_ID = os.getenv("TELEGRAM_GROUP_ID")
def restricted_to_group(func):
    @wraps(func)
    async def wrapped(update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not update.effective_chat or str(update.effective_chat.id) != ALLOWED_GROUP_ID:
            if update.message:
                await update.message.reply_text("‚ö†Ô∏è Unauthorized access!")
            return
        return await func(update, context)
    return wrapped

@restricted_to_group
async def send_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("ƒêang x·ª≠ l√Ω...")

    try:
        args = context.args
        
        # Split arguments into product name and emails
        product_parts = []
        emails = []
        email_found = False
        
        for arg in args:
            if not email_found and '@' in arg:
                email_found = True
                
            if email_found:
                emails.append(arg)
            else:
                product_parts.append(arg)

        # Validate input
        if not product_parts:
            await update.message.reply_text("‚ùå Vui l√≤ng nh·∫≠p t√™n s·∫£n ph·∫©m!\nV√≠ d·ª•: /send \"Tai nghe M9\" customer1@mail.com customer2@mail.com")
            return
            
        if not emails:
            await update.message.reply_text("‚ùå Vui l√≤ng nh·∫≠p √≠t nh·∫•t m·ªôt ƒë·ªãa ch·ªâ email!\nV√≠ d·ª•: /send \"Tai nghe M9\" customer1@mail.com customer2@mail.com")
            return

        product_name = ' '.join(product_parts)
        body = f"""K√≠nh ch√†o qu√Ω kh√°ch h√†ng, s·∫£n ph·∫©m b·∫°n Order : "{product_name}" Hi·ªán t·∫°i ƒë√£ h·∫° c√°nh t·∫°i kho HN. N·∫øu ch∆∞a thanh to√°n n·ªët s·ªë ti·ªÅn c√≤n l·∫°i, b·∫°n vui l√≤ng li√™n h·ªá v√† thanh to√°n qua k√™nh Discord ho·∫∑c Facebook c·ªßa shop nh√©.

Sau khi x√°c nh·∫≠n thanh to√°n ho√†n t·∫•t, b√™n m√¨nh s·∫Ω l√†m vi·ªác v√† ƒë√≥ng g√≥i h√†ng trong 1-2 ng√†y li·ªÅn k·ªÅ, b·∫°n vui l√≤ng ki·ªÉm tra th√¥ng tin tr√™n app ViettelPost n·∫øu c√≥ nhu c·∫ßu nh·∫≠n M√£ V·∫≠n ƒê∆°n.

T-Order xin tr√¢n tr·ªçng c·∫£m ∆°n.

Th√¥ng tin li√™n l·∫°c:
- Discord: https://discord.gg/torder
- Facebook: https://www.facebook.com/torder19

Vui l√≤ng kh√¥ng tr·∫£ l·ªùi email n√†y"""

        # Send to each recipient individually
        with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as server:
            server.starttls()
            server.login(EMAIL_ADDRESS, EMAIL_PASSWORD)
            
            success_count = 0
            for email in emails:
                try:
                    msg = MIMEMultipart()
                    msg['From'] = f"T-Order <{EMAIL_ADDRESS}>"
                    msg['To'] = email
                    msg['Subject'] = "üöÄ [QUAN TR·ªåNG] TH√îNG B√ÅO V·ªÄ T√åNH TR·∫†NG ƒê∆†N H√ÄNG"
                    msg.attach(MIMEText(body, 'plain', 'utf-8'))
                    server.sendmail(EMAIL_ADDRESS, email, msg.as_string())
                    success_count += 1
                except Exception as e:
                    print(f"Failed to send to {email}: {str(e)}")

            await update.message.reply_text(
                f"‚úÖ ƒê√£ g·ª≠i th√¥ng b√°o cho {product_name}\n"
                f"Th√†nh c√¥ng: {success_count}/{len(emails)}\n"
                f"Email nh·∫≠n: {', '.join(emails)}"
            )

    except Exception as e:
        await update.message.reply_text(f"‚ùå L·ªói h·ªá th·ªëng: {str(e)}")
        

def main():
    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("send", send_command))
    app.run_polling()

if __name__ == "__main__":
    main()